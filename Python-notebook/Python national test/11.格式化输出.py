'''
format 格式化输出
    1. format() 方法的基本使用
        - <模板字符串>.format(<参数列表>)
        - 模板字符串是一个由字符串和槽组成的字符串，用来控制字符串和变量的显示效果
        - 槽用 {} 表示，与 format() 中的参数列表相对应
'''

print('{}说：今天天气不错...'.format('小明')) # return 小明说：今天天气不错...

print('{}说：今天天气{}'.format('小明', '不好')) # return 小明说：今天天气不好，槽与填入的参数列表是一一对应的，有顺序之分


'''
format 格式化输出-进阶

{<参数序号>:<格式控制标记>}

:           <填充>                    <对齐>        <宽度>                  <,>                   <.精度>                    <类型>
引导符       用于填充的单个字符          <左对齐       槽的设定输出宽度          数字的千位分隔符        浮点数小数                 整数类型
                                      >右对齐                              适用于整数和浮点数       部分的精度或字符串          b, c, d, o, x, X
                                      ^居中对齐                                                   的最大输出长度             浮点数类型
                                                                                                                          e, E, f, %    
'''

# 1.<填充> <对齐> <宽度>
str1 = 'Python'
print('{0:25}'.format(str1)) # 即将字符串的宽度设置为 25，默认为左对齐
print('{0:2}'.format(str1)) # 当设定宽度小于字符串本身的宽度，则原样输出
print('{0:^25}'.format(str1)) # 设定字符串整体宽度为 25, 并且居中对齐

fill_char = '+'
print('{0:{1}^25}'.format(str1, fill_char)) # return +++++++++Python++++++++++
print('{0:{1}^{2}}'.format(str1, fill_char, 28)) # return +++++++++++Python+++++++++++

# 2.<,> <.精度> <类型>
print('{0:{1}^25,}'.format(2345000, '+')) # return ++++++++2,345,000++++++++ -- ',' 起到千位分隔符的作用

print('{0:.2f}'.format(3.1415)) # return 3.14 -- 即保留两位小数，并进行四舍五入
print('{0:.5}'.format('hello world')) # return hello -- 即字符串保留 5 位

'''
关于 <类型> 的详细说明
    - b 整数二进制形式
    - c 整数对应的 Unicode 字符
    - d 整数十进制形式
    - o 整数八进制形式
    - x 整数小写十六进制形式
    - X 整数大写十六进制形式
    
    - e 浮点数对应的小写字母 e 的指数形式
    - E .... 大写.....
    - f 标准浮点数
    - % 浮点数的百分比形式
'''
print('{0:}'.format(276)) # return 276
print('{0:b}, {0:c}, {0:d}, {0:o}, {0:x}, {0:X}'.format(276)) # return 100010100, Ĕ, 276, 424, 114, 114

print('{0}, {0:e}, {0:E}, {0:.2f}, {0:%}'.format(3.1415)) # return 3.1415, 3.141500e+00, 3.141500E+00, 3.14, 314.150000%
